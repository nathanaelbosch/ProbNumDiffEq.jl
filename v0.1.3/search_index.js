var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If you are unfamiliar with DifferentialEquations.jl, check out the official tutorial on how to solve ordinary differential equations.","category":"page"},{"location":"getting_started/#Step-1:-Defining-a-problem","page":"Getting Started","title":"Step 1: Defining a problem","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we set up an ODEProblem to solve the Fitzhugh-Nagumo model.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using ProbNumDiffEq\n\nfunction fitz(u, p, t)\n    a, b, c = p\n    return [c*(u[1] - u[1]^3/3 + u[2])\n            -(1/c)*(u[1] -  a - b*u[2])]\nend\n\nu0 = [-1.0; 1.0]\ntspan = (0., 20.)\np = (0.2,0.2,3.0)\nprob = ODEProblem(fitz, u0, tspan, p)\nnothing # hide","category":"page"},{"location":"getting_started/#Step-2:-Solving-a-problem","page":"Getting Started","title":"Step 2: Solving a problem","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Currently, ProbNumDiffEq.jl implements two probabilistic numerical methods: EK0 and EK1. In this example we solve the ODE with the default EK0, for high tolerance levels.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"sol = solve(prob, EK0(), abstol=1e-1, reltol=1e-2)\nnothing # hide","category":"page"},{"location":"getting_started/#Step-3:-Analyzing-the-solution","page":"Getting Started","title":"Step 3: Analyzing the solution","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Just as in DifferentialEquations.jl, the result of solve is a solution object, and we can access the (mean) values and timesteps as usual","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"sol[end]\nsol.u[5]\nsol.t[8]","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"However, the solver returns a probabilistic solution, here a Gaussian distribution over solution values:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"sol.pu[end]","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"It is often convenient to look at means, covariances, and standard deviations via Statistics.jl:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Statistics\nmean(sol.pu[5])\ncov(sol.pu[5])\nstd(sol.pu[5])","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"By default, the posterior distribution can be evaluated for arbitrary points in time t by treating sol as a function:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"mean(sol(0.45))","category":"page"},{"location":"getting_started/#Plotting-Solutions","page":"Getting Started","title":"Plotting Solutions","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Finally, we can conveniently visualize the result through Plots.jl:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Plots\nplot(sol)\nsavefig(\"./figures/fitzhugh_nagumo.svg\"); nothing # hide","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: Fitzhugh-Nagumo Solution)","category":"page"},{"location":"solvers/#Solvers-and-Options","page":"Solvers and Options","title":"Solvers and Options","text":"","category":"section"},{"location":"solvers/","page":"Solvers and Options","title":"Solvers and Options","text":"ProbNumDiffEq.jl provides mainly the following two solvers, both based on extended Kalman filtering and smoothing. For the best results we suggest using EK1, but note that it requires that the Jacobian of the vector field is defined.","category":"page"},{"location":"solvers/","page":"Solvers and Options","title":"Solvers and Options","text":"EK1\nEK0","category":"page"},{"location":"solvers/#ProbNumDiffEq.EK1","page":"Solvers and Options","title":"ProbNumDiffEq.EK1","text":"EK1(; prior=:ibm, order=3, diffusionmodel=:dynamic, smooth=true)\n\nGaussian ODE filtering with first order extended Kalman filtering.\n\nCurrently, only the integrated Brownian motion prior :ibm is supported. For the diffusionmodel, chose one of [:dynamic, :dynamicMV, :fixed, :fixedMV, :fixedMAP].\n\nSee also: EK0\n\nReferences:\n\nN. Bosch, P. Hennig, F. Tronarp: Calibrated Adaptive Probabilistic ODE Solvers (2021)\nF. Tronarp, H. Kersting, S. Särkkä, and P. Hennig: Probabilistic Solutions To Ordinary Differential Equations As Non-Linear Bayesian Filtering: A New Perspective (2019)\n\n\n\n\n\n","category":"type"},{"location":"solvers/#ProbNumDiffEq.EK0","page":"Solvers and Options","title":"ProbNumDiffEq.EK0","text":"EK0(; prior=:ibm, order=3, diffusionmodel=:dynamic, smooth=true)\n\nGaussian ODE filtering with zeroth order extended Kalman filtering.\n\nCurrently, only the integrated Brownian motion prior :ibm is supported. For the diffusionmodel, chose one of [:dynamic, :dynamicMV, :fixed, :fixedMV, :fixedMAP].\n\nSee also: EK1\n\nReferences:\n\nN. Bosch, P. Hennig, F. Tronarp: Calibrated Adaptive Probabilistic ODE Solvers (2021)\nF. Tronarp, H. Kersting, S. Särkkä, and P. Hennig: Probabilistic Solutions To Ordinary Differential Equations As Non-Linear Bayesian Filtering: A New Perspective (2019)\nM. Schober, S. Särkkä, and P. Hennig: A Probabilistic Model for the Numerical Solution of Initial Value Problems (2018)\n\n\n\n\n\n","category":"type"},{"location":"solvers/#Experimental:-Iterated-extended-Kalman-smoothing","page":"Solvers and Options","title":"Experimental: Iterated extended Kalman smoothing","text":"","category":"section"},{"location":"solvers/","page":"Solvers and Options","title":"Solvers and Options","text":"We do not recommend using the following solver, but if you are interested feel free to open an issue!","category":"page"},{"location":"solvers/","page":"Solvers and Options","title":"Solvers and Options","text":"IEKS\nsolve_ieks","category":"page"},{"location":"solvers/#ProbNumDiffEq.IEKS","page":"Solvers and Options","title":"ProbNumDiffEq.IEKS","text":"IEKS(; prior=:ibm, order=1, diffusionmodel=:dynamic, linearize_at=nothing)\n\nGaussian ODE filtering with iterated extended Kalman smoothing.\n\nTo use it, use solve_ieks(prob, IEKS(), args...) instead of solve(prob, IEKS(), args...), since it is implemented as an outer loop around the solver.\n\nCurrently, only the integrated Brownian motion prior :ibm is supported. For the diffusionmodel, chose one of [:dynamic, :dynamicMV, :fixed, :fixedMV, :fixedMAP]. Just like the EK1 it requires that the Jacobian of the rhs function is available.\n\nSee also: EK0, EK1, solve_ieks\n\nReferences:\n\nF. Tronarp, S. Särkkä, and P. Hennig: Bayesian ODE Solvers: The Maximum A Posteriori Estimate\n\n\n\n\n\n","category":"type"},{"location":"solvers/#ProbNumDiffEq.solve_ieks","page":"Solvers and Options","title":"ProbNumDiffEq.solve_ieks","text":"solve_ieks(prob::AbstractODEProblem, alg::IEKS, args...; iterations=10, kwargs...)\n\nSolve method to be used with the IEKS. The IEKS works essentially by solving the ODE multiple times. solve_ieks therefore wraps a call to the standard solve method, passing args... and kwargs....\n\nCurrently, this method is very simplistic - it iterates for a fixed numer of times and does not use a stopping criterion.\n\n\n\n\n\n","category":"function"},{"location":"#ProbNumDiffEq.jl","page":"Home","title":"ProbNumDiffEq.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Probabilistic numerical methods for solving differential equations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Fitzhugh-Nagumo Solve Animation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ProbNumDiffEq.jl is a library for probabilistic numerical methods for solving differential equations. It provides drop-in replacements for classic ODE solvers from DifferentialEquations.jl by extending OrdinaryDiffEq.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed directly with the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ProbNumDiffEq","category":"page"},{"location":"#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"getting_started.md\"]\nDepth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"... more to come!","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"#Gaussian-ODE-Filters:","page":"Home","title":"Gaussian ODE Filters:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"N. Bosch, P. Hennig, F. Tronarp: Calibrated Adaptive Probabilistic ODE Solvers (2021)\nF. Tronarp, S. Särkkä, and P. Hennig: Bayesian ODE Solvers: The Maximum A Posteriori Estimate (2021)\nN. Krämer, P. Hennig: Stable Implementation of Probabilistic ODE Solvers (2020)\nH. Kersting, T. J. Sullivan, and P. Hennig: Convergence Rates of Gaussian Ode Filters (2020)\nF. Tronarp, H. Kersting, S. Särkkä, and P. Hennig: Probabilistic Solutions To Ordinary Differential Equations As Non-Linear Bayesian Filtering: A New Perspective (2019)\nM. Schober, S. Särkkä, and P. Hennig: A Probabilistic Model for the Numerical Solution of Initial Value Problems (2018)","category":"page"},{"location":"#Probabilistic-Numerics:","page":"Home","title":"Probabilistic Numerics:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ProbNum is a Python package for probabilistic numerics. It contains much of the functionality of this package, as well as many other implementations of probabilstic numerical methods.\nhttp://probabilistic-numerics.org/\nC. J. Oates and T. J. Sullivan: A modern retrospective on probabilistic numerics (2019)\nP. Hennig, M. A. Osborne, and M. Girolami: Probabilistic numerics and uncertainty in computations (2015)","category":"page"}]
}
