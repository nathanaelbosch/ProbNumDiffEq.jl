# Van der Pol benchmark


!!! note "Summary"
    Van der Pol is a low-dimensional, stiff, second-order ODE. We see that:
    - [**The `EK1` is very well able to solve stiff problems.**](@ref vdp_main_results)
    - [**Since Van der Pol is actually a second-order ODE, _do solve it as a second-order ODE_.**](@ref vdp_second_order)
    - [**Use the `TaylorInit` or `ForwardDiffInit` initialization.**](@ref vdp_initialization)
      While `SimpleInit` works well for lower orders, it fails for higher orders. And since Taylor-mode initialization is fast and works well, there is no reason not to use it.


```julia, results="hidden"
using LinearAlgebra, Statistics, Distributions
using DiffEqDevTools, ParameterizedFunctions, SciMLBase, OrdinaryDiffEq, Plots
using ProbNumDiffEq

Plots.theme(
    :dao;
    markerstrokewidth=0.5,
    legend=:outertopright,
    margin=5Plots.mm,
    xticks = 10.0 .^ (-16:1:16)
)

function plot_chisq_interval!(df, q=0.01)
    dist = Chisq(df)
    low, high, mid = quantile(dist, [q, 1-q])..., mean(dist)
    hline!([low, high], linestyle=:dash, color=:black, label="",
           fill_between=[high nothing], fillcolor=:green, fillalpha=0.15)
    hline!([mid], linestyle=:solid, color=:black, label="")
end
```

```julia
function vanderpol!(du, u, p, t)
    du[1] = u[2]
    du[2] = p[1] * ((1 - u[1]^2) * u[2] - u[1])
end
p = [1e5]
tspan = (0.0, 2.0)
u0 = [2.0, 0.0]
prob = ODEProblem(vanderpol!, u0, tspan, p)

test_sol = solve(prob, RadauIIA5(), abstol=1/10^14, reltol=1/10^14)
plot(test_sol, title="Van der Pol Solution", legend=false, ylims=(-5, 5), xticks=:auto)
```

## [`EK1` across orders](@id vdp_main_results)

```julia
DENSE = false;
SAVE_EVERYSTEP = false;

_setups = [
  "EK1($order)" => Dict(:alg => EK1(order=order, smooth=DENSE))
  for order in 3:7
]

labels = first.(_setups)
setups = last.(_setups)

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

wp = WorkPrecisionSet(
    prob, abstols, reltols, setups;
    names = labels,
    appxsol = test_sol,
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

plot(wp, palette=Plots.palette([:blue, :red], length(_setups)))

_ref_setups = [
    "Rosenbrock23" => Dict(:alg => Rosenbrock23())
    "Rodas4P" => Dict(:alg => Rodas4P())
    "RadauIIA5" => Dict(:alg => RadauIIA5())
]
ref_labels = first.(_ref_setups)
ref_setups = last.(_ref_setups)
ref_wp_final = WorkPrecisionSet(
    prob, abstols, reltols, ref_setups;
    names = ref_labels,
    appxsol = test_sol,
    dense = false,
    save_everystep = false,
    maxiters = Int(1e7),
)
ref_wp_dense = WorkPrecisionSet(
    prob, abstols, reltols, ref_setups;
    names = ref_labels,
    appxsol = test_sol,
    dense = true,
    save_everystep = true,
    maxiters = Int(1e7),
)

plot!(ref_wp_final, x=:final, color=:gray, alpha=0.7, linestyle=:dash)
```

```@raw html
<details><summary>Discrete time-series errors (l2):</summary>
```
```julia
DENSE = true;
SAVE_EVERYSTEP = true;

_setups = [
  "EK1($order)" => Dict(:alg => EK1(order=order, smooth=DENSE))
  for order in 3:7
]

labels = first.(_setups)
setups = last.(_setups)

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

wp = WorkPrecisionSet(
    prob, abstols, reltols, setups;
    names = labels,
    appxsol = test_sol,
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

plot(wp, x=:l2, palette=Plots.palette([:blue, :red], length(_setups)))
plot!(ref_wp_dense, x=:l2, color=:gray, alpha=0.7, linestyle=:dash)
```
```@raw html
</details>
```

```@raw html
<details><summary>Interpolation errors (L2):</summary>
```
```julia
plot(wp, x=:L2, palette=Plots.palette([:blue, :red], length(_setups)))
plot!(ref_wp_dense, x=:L2, color=:gray, alpha=0.7, linestyle=:dash)
```
```@raw html
</details>
```

## Calibration
```julia
plot(wp, x=:final, y=:chi2_final, yguide="Chi-squared (final)",
     palette=Plots.palette([:blue, :red], length(_setups)))
plot_chisq_interval!(2)
```

## [Comparison of the different initialization schemes](@id vdp_initialization)

```julia
DENSE = false;
SAVE_EVERYSTEP = false;

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

orders = (3, 5, 8)
ps = []
for o in orders
    _setups = [
      "EK1($o) TaylorInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=TaylorModeInit(o)))
      "EK1($o) ForwardDiffInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=ForwardDiffInit(o)))
      "EK1($o) SimpleInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=SimpleInit()))
      # "EK1($o) ClassicSolverInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=ClassicSolverInit())) # unstable
    ]

    labels = first.(_setups)
    setups = last.(_setups)

    wp = WorkPrecisionSet(
        prob, abstols, reltols, setups;
        names = labels,
        appxsol = test_sol,
        dense = DENSE,
        save_everystep = SAVE_EVERYSTEP,
        maxiters = Int(1e7),
        numruns = 5,
    )

    p = plot(wp, color=[2 4 5 6], xticks = 10.0 .^ (-16:1:5))
    push!(ps, p)
end
plot(
    ps...,
    layout=(length(orders), 1),
    size = (1000, length(orders)*300),
    xlabel=["" "" "" "Error"],
)
```

```julia
DENSE = false;
SAVE_EVERYSTEP = false;

abstols = 1.0 ./ 10.0 .^ (5:8)
reltols = 1.0 ./ 10.0 .^ (2:5)

_setups = [
    "EK1(8) TaylorInit(8)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(8)))
    "EK1(8) TaylorInit(7)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(7)))
    "EK1(8) TaylorInit(6)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(6)))
    "EK1(8) TaylorInit(5)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(5)))
    "EK1(8) TaylorInit(4)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(4)))
    "EK1(8) TaylorInit(3)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(3)))
    "EK1(8) TaylorInit(2)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(2)))
    # "EK1(8) TaylorInit(1)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(1))) # fails, see above
]

labels = first.(_setups)
setups = last.(_setups)

wp = WorkPrecisionSet(
    prob, abstols, reltols, setups;
    names = labels,
    appxsol = test_sol,
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

plot(wp, palette=Plots.palette([:blue, :red], length(_setups)), xticks = 10.0 .^ (-16:1:5))
```


## [Solving the first- vs second-order ODE](@id vdp_second_order)

```julia
function vanderpol2!(ddu, du, u, p, t)
    ddu[1] = p[1] * ((1 - u[1]^2) * du[1] - u[1])
end
p = [1e5]
tspan = (0.0, 2.0)
u0 = [2.0]
du0 = [0.0]
prob2 = SecondOrderODEProblem(vanderpol2!, du0, u0, tspan, p)

test_sol2 = solve(prob2, RadauIIA5(), abstol=1/10^14, reltol=1/10^14)
# plot(test_sol2, title="Van der Pol Solution (2nd order)", legend=false, ylims=(-5, 5), xticks=:auto)
nothing
```

```julia
DENSE = true;
SAVE_EVERYSTEP = true;

_setups = [
  "EK1(3) 1st order" => Dict(:alg => EK1(order=3, smooth=DENSE))
  "EK1(4) 1st order" => Dict(:alg => EK1(order=4, smooth=DENSE))
  "EK1(5) 1st order" => Dict(:alg => EK1(order=5, smooth=DENSE))
  "EK1(6) 1st order" => Dict(:alg => EK1(order=6, smooth=DENSE))
  "EK1(4) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=4, smooth=DENSE))
  "EK1(5) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=5, smooth=DENSE))
  "EK1(6) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=6, smooth=DENSE))
  "EK1(7) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=7, smooth=DENSE))
]

labels = first.(_setups)
setups = last.(_setups)

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

wp = WorkPrecisionSet(
    [prob, prob2], abstols, reltols, setups;
    names = labels,
    appxsol = [test_sol, test_sol2],
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

color = [1 1 1 1 2 2 2 2]
plot(wp; x=:final, color)
plot!(ref_wp_dense, x=:final, color=:gray, alpha=0.7, linestyle=:dash)
```

```@raw html
<details><summary>Interpolation errors (L2):</summary>
```
```julia
plot(wp; x=:L2, color)
plot!(ref_wp_dense, x=:L2, color=:gray, alpha=0.7, linestyle=:dash)
```
```@raw html
</details>
```

### Calibration

```julia
plot(wp; x=:final, y=:chi2_final, yguide="Chi-squared (final)", color)
plot_chisq_interval!(2)
```


## Appendix
```julia, echo=false
include("utils.jl")
appendix()
```
