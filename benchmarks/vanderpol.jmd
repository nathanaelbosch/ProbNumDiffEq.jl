# Van der Pol benchmark


!!! note "Summary"
    Van der Pol is a low-dimensional, stiff, second-order ODE. We see that:
    - The `EK1` is very well able to solve stiff problems.
    - Since Van der Pol is actually a second-order ODE, _do solve it as a second-order ODE_.


```julia
using LinearAlgebra, Statistics, Distributions
using DiffEqDevTools, ParameterizedFunctions, SciMLBase, OrdinaryDiffEq, Plots
using ProbNumDiffEq

# Plotting theme
theme(:dao;
    markerstrokewidth=0.5,
    legend=:outertopright,
    bottom_margin=5Plots.mm,
    size = (1000, 400),
    xticks = 10.0 .^ (-16:1:16)
)
```

### Van der Pol problem definition

```julia
function vanderpol!(du, u, p, t)
    du[1] = u[2]
    du[2] = p[1] * ((1 - u[1]^2) * u[2] - u[1])
end
p = [1e5]
tspan = (0.0, 2.0)
u0 = [2.0, 0.0]
prob = ODEProblem(vanderpol!, u0, tspan, p)

test_sol = solve(prob, RadauIIA5(), abstol=1/10^14, reltol=1/10^14)
plot(test_sol, title="Van der Pol Solution", legend=false, ylims=(-5, 5), xticks=:auto)
```

## EK1 across orders

### Final value only

This does not require smoothing or saving intermediate values.
```julia
DENSE = false;
SAVE_EVERYSTEP = false;

_setups = [
  "EK1($order)" => Dict(:alg => EK1(order=order, smooth=DENSE))
  for order in 3:7
]

labels = first.(_setups)
setups = last.(_setups)

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

wp = WorkPrecisionSet(
    prob, abstols, reltols, setups;
    names = labels,
    appxsol = test_sol,
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

plot(wp, palette=Plots.palette([:blue, :red], length(_setups)))
```

### Full trajectory

This does require smoothing or saving intermediate values.
```julia
DENSE = true;
SAVE_EVERYSTEP = true;

_setups = [
  "EK1($order)" => Dict(:alg => EK1(order=order, smooth=DENSE))
  for order in 3:7
]

labels = first.(_setups)
setups = last.(_setups)

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

wp = WorkPrecisionSet(
    prob, abstols, reltols, setups;
    names = labels,
    appxsol = test_sol,
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

plot(wp, x=:l2, palette=Plots.palette([:blue, :red], length(_setups)))
```

Interpolation errors:
```julia
plot(wp, x=:L2, palette=Plots.palette([:blue, :red], length(_setups)))
```

## Calibration
```julia
plot(wp, x=:final, y=:chi2_final, yguide="Chi-squared (final)",
     palette=Plots.palette([:blue, :red], length(_setups)))

# Should be distributed according to a Chi-squared distribution:
low, high, mid = quantile(Chisq(2), [0.01, 0.99])..., mean(Chisq(2))
hline!([low, high], linestyle=:dash, color=:black, label="",
       fill_between=true, fillcolor=:green, fillalpha=0.15)
hline!([mid], linestyle=:solid, color=:black, label="")
```

```julia
plot(wp, x=:l2, y=:chi2_steps, yguide="Chi-squared (discrete steps)",
     palette=Plots.palette([:blue, :red], length(_setups)))
hline!([low, high], linestyle=:dash, color=:black, label="",
       fill_between=true, fillcolor=:green, fillalpha=0.15)
hline!([mid], linestyle=:solid, color=:black, label="")
```

```julia
plot(wp, x=:L2, y=:chi2_interp, yguide="Chi-squared (dense)",
     palette=Plots.palette([:blue, :red], length(_setups)))
hline!([low, high], linestyle=:dash, color=:black, label="",
       fill_between=true, fillcolor=:green, fillalpha=0.15)
hline!([mid], linestyle=:solid, color=:black, label="")
```

## Comparison of the different initialization schemes

```julia
DENSE = false;
SAVE_EVERYSTEP = false;

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

orders = (3, 5, 8)
ps = []
for o in orders
    _setups = [
      "EK1($o) TaylorInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=TaylorModeInit(o)))
      "EK1($o) ForwardDiffInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=ForwardDiffInit(o)))
      "EK1($o) SimpleInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=SimpleInit()))
      # "EK1($o) ClassicSolverInit" => Dict(:alg => EK1(order=o, smooth=DENSE, initialization=ClassicSolverInit())) # unstable
    ]

    labels = first.(_setups)
    setups = last.(_setups)

    wp = WorkPrecisionSet(
        prob, abstols, reltols, setups;
        names = labels,
        appxsol = test_sol,
        dense = DENSE,
        save_everystep = SAVE_EVERYSTEP,
        maxiters = Int(1e7),
        numruns = 5,
    )

    p = plot(wp, color=[2 4 5 6], xticks = 10.0 .^ (-16:1:5))
    push!(ps, p)
end
plot(
    ps...,
    layout=(length(orders), 1),
    size = (1000, length(orders)*300),
    xlabel=["" "" "" "Error"],
)
```

```julia
DENSE = false;
SAVE_EVERYSTEP = false;

abstols = 1.0 ./ 10.0 .^ (6:11)
reltols = 1.0 ./ 10.0 .^ (3:8)

_setups = [
    "EK1(8) TaylorInit(8)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(8)))
    "EK1(8) TaylorInit(7)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(7)))
    "EK1(8) TaylorInit(6)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(6)))
    "EK1(8) TaylorInit(5)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(5)))
    "EK1(8) TaylorInit(4)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(4)))
    "EK1(8) TaylorInit(3)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(3)))
    "EK1(8) TaylorInit(2)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(2)))
    # "EK1(8) TaylorInit(1)" => Dict(:alg => EK1(order=8, smooth=DENSE, initialization=TaylorModeInit(1))) # fails, see above
]

labels = first.(_setups)
setups = last.(_setups)

wp = WorkPrecisionSet(
    prob, abstols, reltols, setups;
    names = labels,
    appxsol = test_sol,
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

plot(wp, palette=Plots.palette([:blue, :red], length(_setups)), xticks = 10.0 .^ (-16:1:5))
```


## Solving the first- vs second-order ODE

```julia
function vanderpol2!(ddu, du, u, p, t)
    ddu[1] = p[1] * ((1 - u[1]^2) * du[1] - u[1])
end
p = [1e5]
tspan = (0.0, 2.0)
u0 = [2.0]
du0 = [0.0]
prob2 = SecondOrderODEProblem(vanderpol2!, du0, u0, tspan, p)

test_sol2 = solve(prob2, RadauIIA5(), abstol=1/10^14, reltol=1/10^14)
plot(test_sol2, title="Van der Pol Solution (2nd order)", legend=false, ylims=(-5, 5), xticks=:auto)
```

```julia
DENSE = true;
SAVE_EVERYSTEP = true;

_setups = [
  "EK1(3) 1st order" => Dict(:alg => EK1(order=3, smooth=DENSE))
  "EK1(4) 1st order" => Dict(:alg => EK1(order=4, smooth=DENSE))
  "EK1(5) 1st order" => Dict(:alg => EK1(order=5, smooth=DENSE))
  "EK1(6) 1st order" => Dict(:alg => EK1(order=6, smooth=DENSE))
  "EK1(4) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=4, smooth=DENSE))
  "EK1(5) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=5, smooth=DENSE))
  "EK1(6) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=6, smooth=DENSE))
  "EK1(7) 2nd order" => Dict(:prob_choice => 2, :alg => EK1(order=7, smooth=DENSE))
]

labels = first.(_setups)
setups = last.(_setups)

abstols = 1.0 ./ 10.0 .^ (5:8)
reltols = 1.0 ./ 10.0 .^ (2:5)


wp = WorkPrecisionSet(
    [prob, prob2], abstols, reltols, setups;
    names = labels,
    appxsol = [test_sol, test_sol2],
    dense = DENSE,
    save_everystep = SAVE_EVERYSTEP,
    maxiters = Int(1e7),
    numruns = 5,
)

color = [1 1 1 1 2 2 2 2]
plot(wp; x=:final, color)
```

```julia
plot(wp; x=:L2, color)
```

### Calibration

```julia
plot(wp; x=:final, y=:chi2_final, yguide="Chi-squared (final)", color)
hline!([low, high], linestyle=:dash, color=:black, label="",
       fill_between=true, fillcolor=:green, fillalpha=0.15)
hline!([mid], linestyle=:solid, color=:black, label="")
```

```julia
plot(wp; x=:L2, y=:chi2_interp, yguide="Chi-squared (dense)", color)
hline!([low, high], linestyle=:dash, color=:black, label="",
       fill_between=true, fillcolor=:green, fillalpha=0.15)
hline!([mid], linestyle=:solid, color=:black, label="")
```


## Appendix

Computer information:
```julia
using InteractiveUtils
InteractiveUtils.versioninfo()
```

Package Information:
```julia
using Pkg
Pkg.status()
```

And the full manifest:
```julia
Pkg.status(mode=Pkg.PKGMODE_MANIFEST)
```
